{"version":2,"kind":"Notebook","sha256":"ec2bca4ff513f460864e2e81dfd18e991de31f81cb863b91669ba5070449d61c","slug":"notebooks.eccov4","location":"/notebooks/04_eccov4.ipynb","dependencies":[],"frontmatter":{"title":"MITgcm ECCOv4 Example","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Project Pythia Community","given":"Project Pythia","family":"Community"},"name":"Project Pythia Community","url":"https://projectpythia.org/","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true},"code":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/projectpythia/physical-oceanography-cookbook","copyright":"2024","affiliations":[{"id":"University at Albany (State University of New York)","name":"University at Albany (State University of New York)"},{"id":"UCAR/NCAR","name":"UCAR/NCAR"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/physical-oceanography-cookbook/blob/main/notebooks/04_eccov4.ipynb","thumbnail":"/physical-oceanography-cookbook/build/ProjectPythia_Logo_F-04201c3068b7b7219de19a045117d82d.svg","exports":[{"format":"ipynb","filename":"04_eccov4.ipynb","url":"/physical-oceanography-cookbook/build/04_eccov4-55bbfcab705b7fc1c874bd50dac5a616.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"image","url":"/physical-oceanography-cookbook/build/ProjectPythia_Logo_F-04201c3068b7b7219de19a045117d82d.svg","alt":"Project Pythia Logo","width":250,"key":"HNusqUBdlv","urlSource":"images/ProjectPythia_Logo_Final-01-Blue.svg"},{"type":"text","value":"\n","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ztkogJhEXm"},{"type":"image","url":"/physical-oceanography-cookbook/build/pangeo_simple_logo-7bde173ecc3372b673e1b5c311902023.svg","alt":"Project Pythia Logo","width":250,"key":"q6CBE7kBsl","urlSource":"images/logos/pangeo_simple_logo.svg"}],"key":"msgJPmG6lJ"}],"key":"f0YebVDzFC"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"MITgcm ECCOv4 Example","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"w9PYam1wvh"}],"identifier":"mitgcm-eccov4-example","label":"MITgcm ECCOv4 Example","html_id":"mitgcm-eccov4-example","implicit":true,"key":"Y6m7y2rsTm"},{"type":"thematicBreak","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"S5CZqkPOOL"}],"key":"y7ErEhDrzx"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"p9nyQ0ydQJ"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"TzPyUSGjRM"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This Jupyter notebook demonstrates how to use ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"hULhRcgfFx"},{"type":"link","url":"http://xarray.pydata.org/en/latest/","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"xarray","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"GuPQgBrHrY"}],"urlSource":"http://xarray.pydata.org/en/latest/","key":"mvLCq3D6Ml"},{"type":"text","value":" and ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"CSBSaL1fjS"},{"type":"link","url":"http://xgcm.readthedocs.org","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"xgcm","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"VHVm5DiyEu"}],"urlSource":"http://xgcm.readthedocs.org","key":"UMgMmWWLM0"},{"type":"text","value":" to analyze data from the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"WJEkZkXO1I"},{"type":"link","url":"https://ecco.jpl.nasa.gov/products/latest/","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"ECCO v4r3","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"FmfpOVh6lD"}],"urlSource":"https://ecco.jpl.nasa.gov/products/latest/","key":"TcwcnUkc2F"},{"type":"text","value":" ocean state estimate.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Z8pQE49y48"}],"key":"l8XLsp4D9z"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Loading ECCO zarr data and converting to an xarray dataset","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"uazwaedKQd"}],"key":"SbJxQjoVbJ"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Visualize ocean depth using cartopy","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"fiQJULCZHt"}],"key":"i2dLwBKRDg"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Indexing and selecting data using xarray","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"E8XkaOVNw4"}],"key":"h3XRmPAgEg"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Use dask cluster to speed up reading the data","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"nvOmHqbZ74"}],"key":"ibAdLequG5"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Calculate and plot the horizontally integrated heat content anomaly","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"dBKftaUBjG"}],"key":"o8BwwLWgHI"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Use xgcm to compute the time-mean convergence of veritcally-integrated heat fluxes","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"Gpo94Iwbya"}],"key":"dWRjtDqkKG"}],"key":"IRAamq3MXU"}],"key":"xztd560P41"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iGV8ktjiUJ"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"AFeyanvJf9"},{"type":"table","position":{"start":{"line":3,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"dOFL9fln3G"}],"key":"YnwhU610Mi"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"L0S4TZOtOv"}],"key":"Z8v0q5wVjn"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"yIJ14r2d2H"}],"key":"Awothf2Q3o"}],"key":"ZFwTGaeffX"},{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Intro to Cartopy","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"tPznL0p8JY"}],"urlSource":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","key":"be0uursclY"}],"key":"BF2y4mTHYS"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"kJKWWyibw7"}],"key":"tMVfCIMNuO"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[],"key":"XozRExzaBt"}],"key":"BOwFHjCfVk"},{"type":"tableRow","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/xarray.html","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Xarray","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"dCuLgrz6bu"}],"urlSource":"https://foundations.projectpythia.org/core/xarray.html","key":"lHOiubJSko"}],"key":"NuNSvconAK"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"L1IV5jZDMm"}],"key":"tn5r95yVKL"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Slicing, indexing, basic statistics","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"XtpdWxbdYN"}],"key":"OYH5zf8CL8"}],"key":"c0c5XxM1PQ"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://docs.dask.org/en/stable/","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Dask","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"UOqkLRctuC"}],"urlSource":"https://docs.dask.org/en/stable/","key":"j58BvyNBDq"}],"key":"oKfs9r4N3e"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"CAegptCfsC"}],"key":"aaPNNQ1P4a"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[],"key":"xnyz8MZPN7"}],"key":"GYcFObnv9D"}],"key":"TZzpz1mNo8"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"strong","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"GMJk3fxjDc"}],"key":"oagnPhPZeh"},{"type":"text","value":": 1 hour","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"FODblZ1eDs"}],"key":"ca78c3dscK"}],"key":"ZYwfvb0jDu"}],"key":"saKjuzERyq"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qdDTEZMPxy"},{"type":"heading","depth":2,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"ctCCxK2BZA"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"DMvTfJyGvc"}],"key":"L63IqYx3cD"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import xarray as xr\nimport numpy as np\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nimport intake\nimport cartopy as cart\nimport pyresample\nfrom dask_gateway import GatewayCluster\nfrom dask.distributed import Client\nimport xgcm","key":"Pl2irc4SAr"},{"type":"output","id":"ecEpFgWx7s74kPBRCVLMH","data":[],"key":"dWyALfoM9N"}],"key":"XqEugarGbZ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Load the data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wERkBulk6U"}],"identifier":"load-the-data","label":"Load the data","html_id":"load-the-data","implicit":true,"key":"HVW0j9Xpxk"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The ECCOv4r3 data was converted from its raw MDS (.data / .meta file) format to zarr format, using the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"GeS50YVec4"},{"type":"link","url":"http://xmitgcm.readthedocs.io","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"xmitgcm","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"NlghfoSoj4"}],"urlSource":"http://xmitgcm.readthedocs.io","key":"VBNMKRY884"},{"type":"text","value":" package. ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"CZ0Xz4o0KZ"},{"type":"link","url":"http://zarr.readthedocs.io","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Zarr","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"JuLH7sAhN2"}],"urlSource":"http://zarr.readthedocs.io","key":"upiM1zIvri"},{"type":"text","value":" is a powerful data storage format that can be thought of as an alternative to HDF. In contrast to HDF, zarr works very well with cloud object storage. Zarr is currently useable in python, java, C++, and julia. It is likely that zarr will form the basis of the next major version of the netCDF library.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"h1dIlxcEF5"}],"key":"ozq3BLGMj1"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"If you’re curious, here are some resources to learn more about zarr:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"fYz9f0Uc05"}],"key":"xe5t9x9PdC"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":6,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://zarr.readthedocs.io/en/stable/tutorial.html","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"https://​zarr​.readthedocs​.io​/en​/stable​/tutorial​.html","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"JvY81NqjvU"}],"urlSource":"https://zarr.readthedocs.io/en/stable/tutorial.html","key":"Dr9YznhGgw"}],"key":"VrhQRwPBrZ"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://speakerdeck.com/rabernat/pangeo-zarr-cloud-data-storage","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"https://​speakerdeck​.com​/rabernat​/pangeo​-zarr​-cloud​-data​-storage","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"ibsFG060in"}],"urlSource":"https://speakerdeck.com/rabernat/pangeo-zarr-cloud-data-storage","key":"RssOntDYby"}],"key":"JFjRXacA1c"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"link","url":"https://mrocklin.github.com/blog/work/2018/02/06/hdf-in-the-cloud","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"https://​mrocklin​.github​.com​/blog​/work​/2018​/02​/06​/hdf​-in​-the​-cloud","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"cWx0vd2r4R"}],"urlSource":"https://mrocklin.github.com/blog/work/2018/02/06/hdf-in-the-cloud","key":"vqRDBlB4vG"}],"key":"C2S0Iqbbth"}],"key":"QwpTtDXhSu"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"The ECCO zarr data currently lives in ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"XUEgxBASh5"},{"type":"link","url":"https://cloud.google.com/storage/","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Google Cloud Storage","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"JisDhc9kLR"}],"urlSource":"https://cloud.google.com/storage/","key":"pJ5MoRBIVm"},{"type":"text","value":" as part of the ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"oXeTTROUTp"},{"type":"link","url":"http://catalog.pangeo.io/","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Pangeo Data Catalog","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"XGJW5nqyib"}],"urlSource":"http://catalog.pangeo.io/","key":"jz8vSkm974"},{"type":"text","value":". This means we can open the whole dataset using one line of code.","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"namePkRCYm"}],"key":"B2iJwe1SCw"},{"type":"paragraph","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"This takes a bit of time to run because the metadata must be downloaded and parsed. The type of object returned is an ","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"hUM05XfBI1"},{"type":"link","url":"https://xarray.pydata.org/en/latest/user-guide/data-structures.html#dataset","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Xarray dataset","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"jiSC66d6iK"}],"urlSource":"https://xarray.pydata.org/en/latest/user-guide/data-structures.html#dataset","key":"tFJGXtTfeI"},{"type":"text","value":".","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"B3YWKrLbdw"}],"key":"l9Hv2Uuu19"}],"key":"DXrhuEZ2SM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"cat = intake.open_catalog(\"https://raw.githubusercontent.com/pangeo-data/pangeo-datastore/master/intake-catalogs/ocean.yaml\")\nds = cat.ECCOv4r3.to_dask()\nds","key":"beE4F6ZJpb"},{"type":"output","id":"yAdYZponPsYiqXOmWE9Cb","data":[{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mValueError\u001b[39m                                Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[2]\u001b[39m\u001b[32m, line 2\u001b[39m\n\u001b[32m      1\u001b[39m cat = intake.open_catalog(\u001b[33m\"\u001b[39m\u001b[33mhttps://raw.githubusercontent.com/pangeo-data/pangeo-datastore/master/intake-catalogs/ocean.yaml\u001b[39m\u001b[33m\"\u001b[39m)\n\u001b[32m----> \u001b[39m\u001b[32m2\u001b[39m ds = \u001b[43mcat\u001b[49m\u001b[43m.\u001b[49m\u001b[43mECCOv4r3\u001b[49m\u001b[43m.\u001b[49m\u001b[43mto_dask\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m      3\u001b[39m ds\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/po-cookbook-dev/lib/python3.13/site-packages/intake_xarray/base.py:8\u001b[39m, in \u001b[36mIntakeXarraySourceAdapter.to_dask\u001b[39m\u001b[34m(self)\u001b[39m\n\u001b[32m      6\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mto_dask\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[32m      7\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[33m\"\u001b[39m\u001b[33mchunks\u001b[39m\u001b[33m\"\u001b[39m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m.reader.kwargs:\n\u001b[32m----> \u001b[39m\u001b[32m8\u001b[39m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mreader\u001b[49m\u001b[43m(\u001b[49m\u001b[43mchunks\u001b[49m\u001b[43m=\u001b[49m\u001b[43m{\u001b[49m\u001b[43m}\u001b[49m\u001b[43m)\u001b[49m\u001b[43m.\u001b[49m\u001b[43mread\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m      9\u001b[39m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m     10\u001b[39m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m.reader.read()\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/po-cookbook-dev/lib/python3.13/site-packages/intake/readers/readers.py:121\u001b[39m, in \u001b[36mBaseReader.read\u001b[39m\u001b[34m(self, *args, **kwargs)\u001b[39m\n\u001b[32m    119\u001b[39m kw.update(kwargs)\n\u001b[32m    120\u001b[39m args = kw.pop(\u001b[33m\"\u001b[39m\u001b[33margs\u001b[39m\u001b[33m\"\u001b[39m, ()) \u001b[38;5;129;01mor\u001b[39;00m args\n\u001b[32m--> \u001b[39m\u001b[32m121\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_read\u001b[49m\u001b[43m(\u001b[49m\u001b[43m*\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkw\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/po-cookbook-dev/lib/python3.13/site-packages/intake/readers/readers.py:1327\u001b[39m, in \u001b[36mXArrayDatasetReader._read\u001b[39m\u001b[34m(self, data, open_local, **kw)\u001b[39m\n\u001b[32m   1325\u001b[39m         f = fsspec.open(data.url, **(data.storage_options \u001b[38;5;129;01mor\u001b[39;00m {})).open()\n\u001b[32m   1326\u001b[39m         \u001b[38;5;28;01mreturn\u001b[39;00m open_dataset(f, **kw)\n\u001b[32m-> \u001b[39m\u001b[32m1327\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mopen_dataset\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m.\u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkw\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/po-cookbook-dev/lib/python3.13/site-packages/xarray/backends/api.py:688\u001b[39m, in \u001b[36mopen_dataset\u001b[39m\u001b[34m(filename_or_obj, engine, chunks, cache, decode_cf, mask_and_scale, decode_times, decode_timedelta, use_cftime, concat_characters, decode_coords, drop_variables, inline_array, chunked_array_type, from_array_kwargs, backend_kwargs, **kwargs)\u001b[39m\n\u001b[32m    676\u001b[39m decoders = _resolve_decoders_kwargs(\n\u001b[32m    677\u001b[39m     decode_cf,\n\u001b[32m    678\u001b[39m     open_backend_dataset_parameters=backend.open_dataset_parameters,\n\u001b[32m   (...)\u001b[39m\u001b[32m    684\u001b[39m     decode_coords=decode_coords,\n\u001b[32m    685\u001b[39m )\n\u001b[32m    687\u001b[39m overwrite_encoded_chunks = kwargs.pop(\u001b[33m\"\u001b[39m\u001b[33moverwrite_encoded_chunks\u001b[39m\u001b[33m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m)\n\u001b[32m--> \u001b[39m\u001b[32m688\u001b[39m backend_ds = \u001b[43mbackend\u001b[49m\u001b[43m.\u001b[49m\u001b[43mopen_dataset\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    689\u001b[39m \u001b[43m    \u001b[49m\u001b[43mfilename_or_obj\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    690\u001b[39m \u001b[43m    \u001b[49m\u001b[43mdrop_variables\u001b[49m\u001b[43m=\u001b[49m\u001b[43mdrop_variables\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    691\u001b[39m \u001b[43m    \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mdecoders\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    692\u001b[39m \u001b[43m    \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    693\u001b[39m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    694\u001b[39m ds = _dataset_from_backend_dataset(\n\u001b[32m    695\u001b[39m     backend_ds,\n\u001b[32m    696\u001b[39m     filename_or_obj,\n\u001b[32m   (...)\u001b[39m\u001b[32m    706\u001b[39m     **kwargs,\n\u001b[32m    707\u001b[39m )\n\u001b[32m    708\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m ds\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/po-cookbook-dev/lib/python3.13/site-packages/xarray/backends/zarr.py:1578\u001b[39m, in \u001b[36mZarrBackendEntrypoint.open_dataset\u001b[39m\u001b[34m(self, filename_or_obj, mask_and_scale, decode_times, concat_characters, decode_coords, drop_variables, use_cftime, decode_timedelta, group, mode, synchronizer, consolidated, chunk_store, storage_options, zarr_version, zarr_format, store, engine, use_zarr_fill_value_as_mask, cache_members)\u001b[39m\n\u001b[32m   1576\u001b[39m filename_or_obj = _normalize_path(filename_or_obj)\n\u001b[32m   1577\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m store:\n\u001b[32m-> \u001b[39m\u001b[32m1578\u001b[39m     store = \u001b[43mZarrStore\u001b[49m\u001b[43m.\u001b[49m\u001b[43mopen_group\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m   1579\u001b[39m \u001b[43m        \u001b[49m\u001b[43mfilename_or_obj\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1580\u001b[39m \u001b[43m        \u001b[49m\u001b[43mgroup\u001b[49m\u001b[43m=\u001b[49m\u001b[43mgroup\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1581\u001b[39m \u001b[43m        \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m=\u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1582\u001b[39m \u001b[43m        \u001b[49m\u001b[43msynchronizer\u001b[49m\u001b[43m=\u001b[49m\u001b[43msynchronizer\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1583\u001b[39m \u001b[43m        \u001b[49m\u001b[43mconsolidated\u001b[49m\u001b[43m=\u001b[49m\u001b[43mconsolidated\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1584\u001b[39m \u001b[43m        \u001b[49m\u001b[43mconsolidate_on_close\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[32m   1585\u001b[39m \u001b[43m        \u001b[49m\u001b[43mchunk_store\u001b[49m\u001b[43m=\u001b[49m\u001b[43mchunk_store\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1586\u001b[39m \u001b[43m        \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[43m=\u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1587\u001b[39m \u001b[43m        \u001b[49m\u001b[43mzarr_version\u001b[49m\u001b[43m=\u001b[49m\u001b[43mzarr_version\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1588\u001b[39m \u001b[43m        \u001b[49m\u001b[43muse_zarr_fill_value_as_mask\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[32m   1589\u001b[39m \u001b[43m        \u001b[49m\u001b[43mzarr_format\u001b[49m\u001b[43m=\u001b[49m\u001b[43mzarr_format\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1590\u001b[39m \u001b[43m        \u001b[49m\u001b[43mcache_members\u001b[49m\u001b[43m=\u001b[49m\u001b[43mcache_members\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1591\u001b[39m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   1593\u001b[39m store_entrypoint = StoreBackendEntrypoint()\n\u001b[32m   1594\u001b[39m \u001b[38;5;28;01mwith\u001b[39;00m close_on_error(store):\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/po-cookbook-dev/lib/python3.13/site-packages/xarray/backends/zarr.py:664\u001b[39m, in \u001b[36mZarrStore.open_group\u001b[39m\u001b[34m(cls, store, mode, synchronizer, group, consolidated, consolidate_on_close, chunk_store, storage_options, append_dim, write_region, safe_chunks, align_chunks, zarr_version, zarr_format, use_zarr_fill_value_as_mask, write_empty, cache_members)\u001b[39m\n\u001b[32m    638\u001b[39m \u001b[38;5;129m@classmethod\u001b[39m\n\u001b[32m    639\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mopen_group\u001b[39m(\n\u001b[32m    640\u001b[39m     \u001b[38;5;28mcls\u001b[39m,\n\u001b[32m   (...)\u001b[39m\u001b[32m    657\u001b[39m     cache_members: \u001b[38;5;28mbool\u001b[39m = \u001b[38;5;28;01mTrue\u001b[39;00m,\n\u001b[32m    658\u001b[39m ):\n\u001b[32m    659\u001b[39m     (\n\u001b[32m    660\u001b[39m         zarr_group,\n\u001b[32m    661\u001b[39m         consolidate_on_close,\n\u001b[32m    662\u001b[39m         close_store_on_close,\n\u001b[32m    663\u001b[39m         use_zarr_fill_value_as_mask,\n\u001b[32m--> \u001b[39m\u001b[32m664\u001b[39m     ) = \u001b[43m_get_open_params\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    665\u001b[39m \u001b[43m        \u001b[49m\u001b[43mstore\u001b[49m\u001b[43m=\u001b[49m\u001b[43mstore\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    666\u001b[39m \u001b[43m        \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m=\u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    667\u001b[39m \u001b[43m        \u001b[49m\u001b[43msynchronizer\u001b[49m\u001b[43m=\u001b[49m\u001b[43msynchronizer\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    668\u001b[39m \u001b[43m        \u001b[49m\u001b[43mgroup\u001b[49m\u001b[43m=\u001b[49m\u001b[43mgroup\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    669\u001b[39m \u001b[43m        \u001b[49m\u001b[43mconsolidated\u001b[49m\u001b[43m=\u001b[49m\u001b[43mconsolidated\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    670\u001b[39m \u001b[43m        \u001b[49m\u001b[43mconsolidate_on_close\u001b[49m\u001b[43m=\u001b[49m\u001b[43mconsolidate_on_close\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    671\u001b[39m \u001b[43m        \u001b[49m\u001b[43mchunk_store\u001b[49m\u001b[43m=\u001b[49m\u001b[43mchunk_store\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    672\u001b[39m \u001b[43m        \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[43m=\u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    673\u001b[39m \u001b[43m        \u001b[49m\u001b[43mzarr_version\u001b[49m\u001b[43m=\u001b[49m\u001b[43mzarr_version\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    674\u001b[39m \u001b[43m        \u001b[49m\u001b[43muse_zarr_fill_value_as_mask\u001b[49m\u001b[43m=\u001b[49m\u001b[43muse_zarr_fill_value_as_mask\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    675\u001b[39m \u001b[43m        \u001b[49m\u001b[43mzarr_format\u001b[49m\u001b[43m=\u001b[49m\u001b[43mzarr_format\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    676\u001b[39m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    678\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mcls\u001b[39m(\n\u001b[32m    679\u001b[39m         zarr_group,\n\u001b[32m    680\u001b[39m         mode,\n\u001b[32m   (...)\u001b[39m\u001b[32m    689\u001b[39m         cache_members=cache_members,\n\u001b[32m    690\u001b[39m     )\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/po-cookbook-dev/lib/python3.13/site-packages/xarray/backends/zarr.py:1782\u001b[39m, in \u001b[36m_get_open_params\u001b[39m\u001b[34m(store, mode, synchronizer, group, consolidated, consolidate_on_close, chunk_store, storage_options, zarr_version, use_zarr_fill_value_as_mask, zarr_format)\u001b[39m\n\u001b[32m   1778\u001b[39m group = open_kwargs.pop(\u001b[33m\"\u001b[39m\u001b[33mpath\u001b[39m\u001b[33m\"\u001b[39m)\n\u001b[32m   1780\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m consolidated:\n\u001b[32m   1781\u001b[39m     \u001b[38;5;66;03m# TODO: an option to pass the metadata_key keyword\u001b[39;00m\n\u001b[32m-> \u001b[39m\u001b[32m1782\u001b[39m     zarr_root_group = \u001b[43mzarr\u001b[49m\u001b[43m.\u001b[49m\u001b[43mopen_consolidated\u001b[49m\u001b[43m(\u001b[49m\u001b[43mstore\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mopen_kwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   1783\u001b[39m \u001b[38;5;28;01melif\u001b[39;00m consolidated \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m   1784\u001b[39m     \u001b[38;5;66;03m# same but with more error handling in case no consolidated metadata found\u001b[39;00m\n\u001b[32m   1785\u001b[39m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/po-cookbook-dev/lib/python3.13/site-packages/zarr/api/synchronous.py:222\u001b[39m, in \u001b[36mopen_consolidated\u001b[39m\u001b[34m(use_consolidated, *args, **kwargs)\u001b[39m\n\u001b[32m    217\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mopen_consolidated\u001b[39m(*args: Any, use_consolidated: Literal[\u001b[38;5;28;01mTrue\u001b[39;00m] = \u001b[38;5;28;01mTrue\u001b[39;00m, **kwargs: Any) -> Group:\n\u001b[32m    218\u001b[39m \u001b[38;5;250m    \u001b[39m\u001b[33;03m\"\"\"\u001b[39;00m\n\u001b[32m    219\u001b[39m \u001b[33;03m    Alias for :func:`open_group` with ``use_consolidated=True``.\u001b[39;00m\n\u001b[32m    220\u001b[39m \u001b[33;03m    \"\"\"\u001b[39;00m\n\u001b[32m    221\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m Group(\n\u001b[32m--> \u001b[39m\u001b[32m222\u001b[39m         \u001b[43msync\u001b[49m\u001b[43m(\u001b[49m\u001b[43masync_api\u001b[49m\u001b[43m.\u001b[49m\u001b[43mopen_consolidated\u001b[49m\u001b[43m(\u001b[49m\u001b[43m*\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muse_consolidated\u001b[49m\u001b[43m=\u001b[49m\u001b[43muse_consolidated\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    223\u001b[39m     )\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/po-cookbook-dev/lib/python3.13/site-packages/zarr/core/sync.py:163\u001b[39m, in \u001b[36msync\u001b[39m\u001b[34m(coro, loop, timeout)\u001b[39m\n\u001b[32m    160\u001b[39m return_result = \u001b[38;5;28mnext\u001b[39m(\u001b[38;5;28miter\u001b[39m(finished)).result()\n\u001b[32m    162\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(return_result, \u001b[38;5;167;01mBaseException\u001b[39;00m):\n\u001b[32m--> \u001b[39m\u001b[32m163\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m return_result\n\u001b[32m    164\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    165\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m return_result\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/po-cookbook-dev/lib/python3.13/site-packages/zarr/core/sync.py:119\u001b[39m, in \u001b[36m_runner\u001b[39m\u001b[34m(coro)\u001b[39m\n\u001b[32m    114\u001b[39m \u001b[38;5;250m\u001b[39m\u001b[33;03m\"\"\"\u001b[39;00m\n\u001b[32m    115\u001b[39m \u001b[33;03mAwait a coroutine and return the result of running it. If awaiting the coroutine raises an\u001b[39;00m\n\u001b[32m    116\u001b[39m \u001b[33;03mexception, the exception will be returned.\u001b[39;00m\n\u001b[32m    117\u001b[39m \u001b[33;03m\"\"\"\u001b[39;00m\n\u001b[32m    118\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m--> \u001b[39m\u001b[32m119\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mawait\u001b[39;00m coro\n\u001b[32m    120\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m ex:\n\u001b[32m    121\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m ex\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/po-cookbook-dev/lib/python3.13/site-packages/zarr/api/asynchronous.py:381\u001b[39m, in \u001b[36mopen_consolidated\u001b[39m\u001b[34m(use_consolidated, *args, **kwargs)\u001b[39m\n\u001b[32m    376\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m use_consolidated \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mTrue\u001b[39;00m:\n\u001b[32m    377\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(\n\u001b[32m    378\u001b[39m         \u001b[33m\"\u001b[39m\u001b[33m'\u001b[39m\u001b[33muse_consolidated\u001b[39m\u001b[33m'\u001b[39m\u001b[33m must be \u001b[39m\u001b[33m'\u001b[39m\u001b[33mTrue\u001b[39m\u001b[33m'\u001b[39m\u001b[33m in \u001b[39m\u001b[33m'\u001b[39m\u001b[33mopen_consolidated\u001b[39m\u001b[33m'\u001b[39m\u001b[33m. Use \u001b[39m\u001b[33m'\u001b[39m\u001b[33mopen\u001b[39m\u001b[33m'\u001b[39m\u001b[33m with \u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m    379\u001b[39m         \u001b[33m\"\u001b[39m\u001b[33m'\u001b[39m\u001b[33muse_consolidated=False\u001b[39m\u001b[33m'\u001b[39m\u001b[33m to bypass consolidated metadata.\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m    380\u001b[39m     )\n\u001b[32m--> \u001b[39m\u001b[32m381\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mawait\u001b[39;00m open_group(*args, use_consolidated=use_consolidated, **kwargs)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/po-cookbook-dev/lib/python3.13/site-packages/zarr/api/asynchronous.py:843\u001b[39m, in \u001b[36mopen_group\u001b[39m\u001b[34m(store, mode, cache_attrs, synchronizer, path, chunk_store, storage_options, zarr_version, zarr_format, meta_array, attributes, use_consolidated)\u001b[39m\n\u001b[32m    841\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m    842\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m mode \u001b[38;5;129;01min\u001b[39;00m _READ_MODES:\n\u001b[32m--> \u001b[39m\u001b[32m843\u001b[39m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mawait\u001b[39;00m AsyncGroup.open(\n\u001b[32m    844\u001b[39m             store_path, zarr_format=zarr_format, use_consolidated=use_consolidated\n\u001b[32m    845\u001b[39m         )\n\u001b[32m    846\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m (\u001b[38;5;167;01mKeyError\u001b[39;00m, \u001b[38;5;167;01mFileNotFoundError\u001b[39;00m):\n\u001b[32m    847\u001b[39m     \u001b[38;5;28;01mpass\u001b[39;00m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/po-cookbook-dev/lib/python3.13/site-packages/zarr/core/group.py:550\u001b[39m, in \u001b[36mAsyncGroup.open\u001b[39m\u001b[34m(cls, store, zarr_format, use_consolidated)\u001b[39m\n\u001b[32m    543\u001b[39m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mFileNotFoundError\u001b[39;00m(store_path)\n\u001b[32m    544\u001b[39m \u001b[38;5;28;01melif\u001b[39;00m zarr_format \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m    545\u001b[39m     (\n\u001b[32m    546\u001b[39m         zarr_json_bytes,\n\u001b[32m    547\u001b[39m         zgroup_bytes,\n\u001b[32m    548\u001b[39m         zattrs_bytes,\n\u001b[32m    549\u001b[39m         maybe_consolidated_metadata_bytes,\n\u001b[32m--> \u001b[39m\u001b[32m550\u001b[39m     ) = \u001b[38;5;28;01mawait\u001b[39;00m asyncio.gather(\n\u001b[32m    551\u001b[39m         (store_path / ZARR_JSON).get(),\n\u001b[32m    552\u001b[39m         (store_path / ZGROUP_JSON).get(),\n\u001b[32m    553\u001b[39m         (store_path / ZATTRS_JSON).get(),\n\u001b[32m    554\u001b[39m         (store_path / \u001b[38;5;28mstr\u001b[39m(consolidated_key)).get(),\n\u001b[32m    555\u001b[39m     )\n\u001b[32m    556\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m zarr_json_bytes \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m zgroup_bytes \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m    557\u001b[39m         \u001b[38;5;66;03m# warn and favor v3\u001b[39;00m\n\u001b[32m    558\u001b[39m         msg = \u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[33mBoth zarr.json (Zarr format 3) and .zgroup (Zarr format 2) metadata objects exist at \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mstore_path\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m. Zarr format 3 will be used.\u001b[39m\u001b[33m\"\u001b[39m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/po-cookbook-dev/lib/python3.13/site-packages/zarr/storage/_common.py:164\u001b[39m, in \u001b[36mStorePath.get\u001b[39m\u001b[34m(self, prototype, byte_range)\u001b[39m\n\u001b[32m    162\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m prototype \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m    163\u001b[39m     prototype = default_buffer_prototype()\n\u001b[32m--> \u001b[39m\u001b[32m164\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mawait\u001b[39;00m \u001b[38;5;28mself\u001b[39m.store.get(\u001b[38;5;28mself\u001b[39m.path, prototype=prototype, byte_range=byte_range)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/po-cookbook-dev/lib/python3.13/site-packages/zarr/storage/_fsspec.py:300\u001b[39m, in \u001b[36mFsspecStore.get\u001b[39m\u001b[34m(self, key, prototype, byte_range)\u001b[39m\n\u001b[32m    298\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m    299\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m byte_range \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m--> \u001b[39m\u001b[32m300\u001b[39m         value = prototype.buffer.from_bytes(\u001b[38;5;28;01mawait\u001b[39;00m \u001b[38;5;28mself\u001b[39m.fs._cat_file(path))\n\u001b[32m    301\u001b[39m     \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(byte_range, RangeByteRequest):\n\u001b[32m    302\u001b[39m         value = prototype.buffer.from_bytes(\n\u001b[32m    303\u001b[39m             \u001b[38;5;28;01mawait\u001b[39;00m \u001b[38;5;28mself\u001b[39m.fs._cat_file(\n\u001b[32m    304\u001b[39m                 path,\n\u001b[32m   (...)\u001b[39m\u001b[32m    307\u001b[39m             )\n\u001b[32m    308\u001b[39m         )\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/po-cookbook-dev/lib/python3.13/site-packages/gcsfs/core.py:1115\u001b[39m, in \u001b[36mGCSFileSystem._cat_file\u001b[39m\u001b[34m(self, path, start, end, **kwargs)\u001b[39m\n\u001b[32m   1113\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m   1114\u001b[39m     head = {}\n\u001b[32m-> \u001b[39m\u001b[32m1115\u001b[39m headers, out = \u001b[38;5;28;01mawait\u001b[39;00m \u001b[38;5;28mself\u001b[39m._call(\u001b[33m\"\u001b[39m\u001b[33mGET\u001b[39m\u001b[33m\"\u001b[39m, u2, headers=head)\n\u001b[32m   1116\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m out\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/po-cookbook-dev/lib/python3.13/site-packages/gcsfs/core.py:481\u001b[39m, in \u001b[36mGCSFileSystem._call\u001b[39m\u001b[34m(self, method, path, json_out, info_out, *args, **kwargs)\u001b[39m\n\u001b[32m    477\u001b[39m \u001b[38;5;28;01masync\u001b[39;00m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34m_call\u001b[39m(\n\u001b[32m    478\u001b[39m     \u001b[38;5;28mself\u001b[39m, method, path, *args, json_out=\u001b[38;5;28;01mFalse\u001b[39;00m, info_out=\u001b[38;5;28;01mFalse\u001b[39;00m, **kwargs\n\u001b[32m    479\u001b[39m ):\n\u001b[32m    480\u001b[39m     logger.debug(\u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mmethod.upper()\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mpath\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m, \u001b[39m\u001b[38;5;132;01m{\u001b[39;00margs\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m, \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkwargs.get(\u001b[33m'\u001b[39m\u001b[33mheaders\u001b[39m\u001b[33m'\u001b[39m)\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m\"\u001b[39m)\n\u001b[32m--> \u001b[39m\u001b[32m481\u001b[39m     status, headers, info, contents = \u001b[38;5;28;01mawait\u001b[39;00m \u001b[38;5;28mself\u001b[39m._request(\n\u001b[32m    482\u001b[39m         method, path, *args, **kwargs\n\u001b[32m    483\u001b[39m     )\n\u001b[32m    484\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m json_out:\n\u001b[32m    485\u001b[39m         \u001b[38;5;28;01mreturn\u001b[39;00m json.loads(contents)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/po-cookbook-dev/lib/python3.13/site-packages/decorator.py:224\u001b[39m, in \u001b[36mdecorate.<locals>.fun\u001b[39m\u001b[34m(*args, **kw)\u001b[39m\n\u001b[32m    222\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m kwsyntax:\n\u001b[32m    223\u001b[39m     args, kw = fix(args, kw, sig)\n\u001b[32m--> \u001b[39m\u001b[32m224\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mawait\u001b[39;00m caller(func, *(extras + args), **kw)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/po-cookbook-dev/lib/python3.13/site-packages/gcsfs/retry.py:135\u001b[39m, in \u001b[36mretry_request\u001b[39m\u001b[34m(func, retries, *args, **kwargs)\u001b[39m\n\u001b[32m    133\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m retry > \u001b[32m0\u001b[39m:\n\u001b[32m    134\u001b[39m         \u001b[38;5;28;01mawait\u001b[39;00m asyncio.sleep(\u001b[38;5;28mmin\u001b[39m(random.random() + \u001b[32m2\u001b[39m ** (retry - \u001b[32m1\u001b[39m), \u001b[32m32\u001b[39m))\n\u001b[32m--> \u001b[39m\u001b[32m135\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mawait\u001b[39;00m func(*args, **kwargs)\n\u001b[32m    136\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m (\n\u001b[32m    137\u001b[39m     HttpError,\n\u001b[32m    138\u001b[39m     requests.exceptions.RequestException,\n\u001b[32m   (...)\u001b[39m\u001b[32m    141\u001b[39m     aiohttp.client_exceptions.ClientError,\n\u001b[32m    142\u001b[39m ) \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[32m    143\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m (\n\u001b[32m    144\u001b[39m         \u001b[38;5;28misinstance\u001b[39m(e, HttpError)\n\u001b[32m    145\u001b[39m         \u001b[38;5;129;01mand\u001b[39;00m e.code == \u001b[32m400\u001b[39m\n\u001b[32m    146\u001b[39m         \u001b[38;5;129;01mand\u001b[39;00m \u001b[33m\"\u001b[39m\u001b[33mrequester pays\u001b[39m\u001b[33m\"\u001b[39m \u001b[38;5;129;01min\u001b[39;00m e.message\n\u001b[32m    147\u001b[39m     ):\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/po-cookbook-dev/lib/python3.13/site-packages/gcsfs/core.py:474\u001b[39m, in \u001b[36mGCSFileSystem._request\u001b[39m\u001b[34m(self, method, path, headers, json, data, *args, **kwargs)\u001b[39m\n\u001b[32m    471\u001b[39m info = r.request_info  \u001b[38;5;66;03m# for debug only\u001b[39;00m\n\u001b[32m    472\u001b[39m contents = \u001b[38;5;28;01mawait\u001b[39;00m r.read()\n\u001b[32m--> \u001b[39m\u001b[32m474\u001b[39m \u001b[43mvalidate_response\u001b[49m\u001b[43m(\u001b[49m\u001b[43mstatus\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcontents\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpath\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43margs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    475\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m status, headers, info, contents\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/po-cookbook-dev/lib/python3.13/site-packages/gcsfs/retry.py:120\u001b[39m, in \u001b[36mvalidate_response\u001b[39m\u001b[34m(status, content, path, args)\u001b[39m\n\u001b[32m    118\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m requests.exceptions.ProxyError()\n\u001b[32m    119\u001b[39m \u001b[38;5;28;01melif\u001b[39;00m \u001b[33m\"\u001b[39m\u001b[33minvalid\u001b[39m\u001b[33m\"\u001b[39m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mstr\u001b[39m(msg):\n\u001b[32m--> \u001b[39m\u001b[32m120\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[33mBad Request: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mpath\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;132;01m{\u001b[39;00mmsg\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m\"\u001b[39m)\n\u001b[32m    121\u001b[39m \u001b[38;5;28;01melif\u001b[39;00m error \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(error, \u001b[38;5;28mstr\u001b[39m):\n\u001b[32m    122\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m HttpError(error)\n\n\u001b[31mValueError\u001b[39m: Bad Request: https://storage.googleapis.com/download/storage/v1/b/pangeo-ecco-eccov4r3/o/eccov4r3%2Fzarr.json?alt=media\nUser project specified in the request is invalid.","ename":"ValueError","evalue":"Bad Request: https://storage.googleapis.com/download/storage/v1/b/pangeo-ecco-eccov4r3/o/eccov4r3%2Fzarr.json?alt=media\nUser project specified in the request is invalid."}],"key":"Vn2UrkFPxi"}],"key":"G4ku054JhV"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Note that no data has been actually download yet. Xarray uses the approach of ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IlZbUZdkpu"},{"type":"emphasis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"lazy evaluation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qYAFeL3Vz5"}],"key":"sFSOQS2OCl"},{"type":"text","value":", in which loading of data and execution of computations is delayed as long as possible (i.e. until data is actually needed for a plot). The data are represented symbolically as ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mULnKTWsBs"},{"type":"link","url":"http://docs.dask.org/en/latest/array.html","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"dask arrays","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jV1A7Ep2tK"}],"urlSource":"http://docs.dask.org/en/latest/array.html","key":"zu8pXO9sLn"},{"type":"text","value":". For example:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Z2wb5UfR8w"}],"key":"nC9M4IWlq7"},{"type":"code","lang":"","value":"SALT       (time, k, face, j, i) float32 dask.array<shape=(288, 50, 13, 90, 90), chunksize=(1, 50, 13, 90, 90)>","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"w9Bf9nOvM2"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"The full shape of the array is (288, 50, 13, 90, 90), quite large. But the ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"MjGQlTU8Fj"},{"type":"emphasis","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"chunksize","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"pAJPHbp5kx"}],"key":"NOhd0GY9AU"},{"type":"text","value":" is (1, 50, 13, 90, 90). Here the chunks correspond to the individual granuales of data (objects) in cloud storage. The chunk is the minimum amount of data we can read at one time.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"IcZGEE0wo0"}],"key":"yA2es85SKS"}],"key":"ePN7SIIhfj"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# a trick to make things work a bit faster\ncoords = ds.coords.to_dataset().reset_coords()\nds = ds.reset_coords(drop=True)","key":"K8Oj4RtycB"},{"type":"output","id":"7r0qnmrklMFr3glFhD2IV","data":[],"key":"Iy4V05lRsL"}],"key":"UW03RdW0tO"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Visualizing Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iKuHJEaL0B"}],"identifier":"visualizing-data","label":"Visualizing Data","html_id":"visualizing-data","implicit":true,"key":"cdLel3y37i"},{"type":"heading","depth":3,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"A Direct Plot","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"DA3fMlCZCU"}],"identifier":"a-direct-plot","label":"A Direct Plot","html_id":"a-direct-plot","implicit":true,"key":"nns4srTfUQ"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Let’s try to visualize something simple: the ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"lg4TLEeTnj"},{"type":"inlineCode","value":"Depth","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"WlcexO9vMS"},{"type":"text","value":" variable. Here is how the data are stored:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"QYfVw2LXPb"}],"key":"CiuGtjqvi2"},{"type":"code","lang":"","value":"Depth      (face, j, i) float32 dask.array<shape=(13, 90, 90), chunksize=(13, 90, 90)>","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"MGGeCFy9dW"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Although depth is a 2D field, there is an extra, dimension (","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"UhAzro0Ml9"},{"type":"inlineCode","value":"face","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"NDvjxUoLGp"},{"type":"text","value":") corresponding to the LLC face number. Let’s use xarray’s built in plotting functions to plot each face individually.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"goEHffssyG"}],"key":"eLg0gOpbvz"}],"key":"GKkDcbmxzR"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"coords.Depth.plot(col='face', col_wrap=5)","key":"OsS0GNGJFW"},{"type":"output","id":"CzXhiBVs2A06wbRRMF9fx","data":[],"key":"OwyWLd1OI2"}],"key":"FNGLikDtsb"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This view is not the most useful. It reflects how the data is arranged logically, rather than geographically.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iRSSvGIns5"}],"key":"ggkC62yK6g"},{"type":"heading","depth":3,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"A Pretty Map","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"NQj9xztUQx"}],"identifier":"a-pretty-map","label":"A Pretty Map","html_id":"a-pretty-map","implicit":true,"key":"HcEZnQuniV"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"To make plotting easier, we can define a quick function to plot the data in a more geographically friendly way. Eventually these plotting functions may be provided by the gcmplots package: ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"zJFiXSPW4F"},{"type":"link","url":"https://github.com/xecco/gcmplots","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"https://​github​.com​/xecco​/gcmplots","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"tQU2UNe5yT"}],"urlSource":"https://github.com/xecco/gcmplots","error":true,"key":"WUC2T7oIgV"},{"type":"text","value":". For now, it is easy enough to roll our own.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"gr7l36uyBu"}],"key":"Ldty3g2KoP"}],"key":"EGr1GlmssW"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"class LLCMapper:\n\n    def __init__(self, ds, dx=0.25, dy=0.25):\n        # Extract LLC 2D coordinates\n        lons_1d = ds.XC.values.ravel()\n        lats_1d = ds.YC.values.ravel()\n\n        # Define original grid\n        self.orig_grid = pyresample.geometry.SwathDefinition(lons=lons_1d, lats=lats_1d)\n\n        # Longitudes latitudes to which we will we interpolate\n        lon_tmp = np.arange(-180, 180, dx) + dx/2\n        lat_tmp = np.arange(-90, 90, dy) + dy/2\n\n        # Define the lat lon points of the two parts.\n        self.new_grid_lon, self.new_grid_lat = np.meshgrid(lon_tmp, lat_tmp)\n        self.new_grid  = pyresample.geometry.GridDefinition(lons=self.new_grid_lon,\n                                                            lats=self.new_grid_lat)\n\n    def __call__(self, da, ax=None, projection=cart.crs.Robinson(), lon_0=-60, **plt_kwargs):\n\n        assert set(da.dims) == set(['face', 'j', 'i']), \"da must have dimensions ['face', 'j', 'i']\"\n\n        if ax is None:\n            fig, ax = plt.subplots(figsize=(12, 6), subplot_kw={'projection': projection})\n        else:\n            m = plt.axes(projection=projection)\n            \n        field = pyresample.kd_tree.resample_nearest(self.orig_grid, da.values,\n                                                    self.new_grid,\n                                                    radius_of_influence=100000,\n                                                    fill_value=None)\n\n        vmax = plt_kwargs.pop('vmax', field.max())\n        vmin = plt_kwargs.pop('vmin', field.min())\n\n        \n        x,y = self.new_grid_lon, self.new_grid_lat\n\n        # Find index where data is splitted for mapping\n        split_lon_idx = round(x.shape[1]/(360/(lon_0 if lon_0>0 else lon_0+360)))\n\n\n        p = ax.pcolormesh(x[:,:split_lon_idx], y[:,:split_lon_idx], field[:,:split_lon_idx],\n                         vmax=vmax, vmin=vmin, transform=cart.crs.PlateCarree(), zorder=1, **plt_kwargs)\n        p = ax.pcolormesh(x[:,split_lon_idx:], y[:,split_lon_idx:], field[:,split_lon_idx:],\n                         vmax=vmax, vmin=vmin, transform=cart.crs.PlateCarree(), zorder=2, **plt_kwargs)\n\n        ax.add_feature(cart.feature.LAND, facecolor='0.5', zorder=3)\n        label = ''\n        if da.name is not None:\n            label = da.name\n        if 'units' in da.attrs:\n            label += ' [%s]' % da.attrs['units']\n        cb = plt.colorbar(p, shrink=0.4, label=label)\n        return ax\n","key":"Vfve3ko5GM"},{"type":"output","id":"23aX8_okSm3GZzT-S5lRd","data":[],"key":"PbDAFp4odb"}],"key":"iCpYuUniT1"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"mapper = LLCMapper(coords)\nmapper(coords.Depth);","key":"wJR3K23RiO"},{"type":"output","id":"2X-LUdps0fm5uaoMIZD3m","data":[],"key":"jljo1vSpMu"}],"key":"r63NtRe0QW"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We can use this with any 2D cell-centered LLC variable.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WJpzQutCRu"}],"key":"YUooY7PKy7"},{"type":"heading","depth":2,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Selecting data","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"NzarBBRblh"}],"identifier":"selecting-data","label":"Selecting data","html_id":"selecting-data","implicit":true,"key":"dapGCllXbC"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"The entire ECCOv4e3 dataset is contained in a single ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"NU6WZdE3xP"},{"type":"inlineCode","value":"Xarray.Dataset","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"MtrYMSdxZ5"},{"type":"text","value":" object. How do we find a view specific pieces of data? This is handled by Xarray’s ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"mMRA6Zz5qc"},{"type":"link","url":"http://xarray.pydata.org/en/latest/indexing.html","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"indexing and selecting functions","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"TNQRHMn9mA"}],"urlSource":"http://xarray.pydata.org/en/latest/indexing.html","key":"vIMDoO3VsB"},{"type":"text","value":". To get the SST from January 2000, we do this:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"xAu71AB6Fa"}],"key":"uPnI98mDgy"}],"key":"h17G998CN6"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"sst = ds.THETA.sel(time='2000-01-15', k=0)\nsst","key":"XiHxnxE9sQ"},{"type":"output","id":"6dv8ypYP8hvi0yjEXHNiL","data":[],"key":"v7D4j3RYC4"}],"key":"zXjfOSKJJd"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Still no data has been actually downloaded. That doesn’t happen until we call ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VVyWLTNavH"},{"type":"inlineCode","value":".load()","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EFfHFktrGT"},{"type":"text","value":" explicitly or try to make a plot.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MrpgPq9lno"}],"key":"vb557OUGIN"}],"key":"YdGw9MdGH8"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"mapper(sst, cmap='RdBu_r');","key":"Sn0V0x5EDr"},{"type":"output","id":"jSKX10dHhDTGZr8rCb-0g","data":[],"key":"Vwv5ekR6L4"}],"key":"V9TKvRgYAx"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Do some Calculations","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cPWlQXMloJ"}],"identifier":"do-some-calculations","label":"Do some Calculations","html_id":"do-some-calculations","implicit":true,"key":"sLMn9Rh130"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Now let’s start doing something besides just plotting the existing data. For example, let’s calculate the time-mean SST.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"SH7iV7Ph8Z"}],"key":"wCOOZYPmBe"}],"key":"mg1DpcVh9f"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"mean_sst = ds.THETA.sel(k=0).mean(dim='time')\nmean_sst","key":"AMQNUScTl2"},{"type":"output","id":"JtROr69lGj2iqTq0fmCGN","data":[],"key":"jEYp0cQXz8"}],"key":"Dmu5dmhIdG"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"As usual, no data was loaded. Instead, ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tCbaZbgqjW"},{"type":"inlineCode","value":"mean_sst","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jZHzsWFe4G"},{"type":"text","value":" is a symbolic representation of the data that needs to be pulled and the computations that need to be executed to produce the desired result. In this case, the 288 original chunks all need to be read from cloud storage. Dask coordinates this automatically for us. But it does take some time.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hnMBPBC29u"}],"key":"pwI1NcalqO"}],"key":"PUp3fhFT4a"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%time mean_sst.load()","key":"pIT7neQwjW"},{"type":"output","id":"s9sMsS-SQfDIgp_9l1rdG","data":[],"key":"yimztAzLNl"}],"key":"oMaoZzEgoK"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"mapper(mean_sst, cmap='RdBu_r');","key":"R4f7lWvKET"},{"type":"output","id":"x1YZmy-HrzTxNWo2dHgpr","data":[],"key":"SJ2pj3N0l7"}],"key":"aq6BT9CrRZ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Speeding things up with a Dask Cluster","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SJDIboJ5Bq"}],"identifier":"speeding-things-up-with-a-dask-cluster","label":"Speeding things up with a Dask Cluster","html_id":"speeding-things-up-with-a-dask-cluster","implicit":true,"key":"fXkAbSQE1p"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"How can we speed things up? In general, the main bottleneck for this type of data analysis is the speed with which we can read the data. With cloud storage, the access is highly parallelizeable.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Dyx8nURsFN"}],"key":"YMJWMD4YRU"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"From a Pangeo environment, we can create a ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"jSsFV4igaP"},{"type":"link","url":"https://distributed.dask.org/en/latest/","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Dask cluster","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Bs33SjhjeP"}],"urlSource":"https://distributed.dask.org/en/latest/","key":"EVr6Fga158"},{"type":"text","value":" to spread the work out amongst many compute nodes. This works on both HPC and cloud. In the cloud, the compute nodes are provisioned on the fly and can be shut down as soon as we are done with our analysis.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"WJKk8IWz3j"}],"key":"bGEXkBMSQy"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"The code below will create a cluster with five compute nodes. It can take a few minutes to provision our nodes.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"nIsH98Hd78"}],"key":"QLxhJ1sXgQ"}],"key":"cy5qsPpJRp"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"cluster = GatewayCluster()\ncluster.scale(5)\nclient = Client(cluster)\ncluster","key":"rg8DjjGHhz"},{"type":"output","id":"DQP-E6sjCalSJyhkuvbbD","data":[],"key":"RGjLedyUXR"}],"key":"InSVhj272Y"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now we re-run the mean calculation. Note how the dashboard helps us visualize what the cluster is doing.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KfpuJrl0Tz"}],"key":"TERFWZ85gE"}],"key":"UGUJilpymG"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%time ds.THETA.isel(k=0).mean(dim='time').load()","key":"hHysxLbTJ7"},{"type":"output","id":"qvSGp0GfjJPMxUJEc9o1P","data":[],"key":"BQYc7B0OcT"}],"key":"HL85lBYMFh"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Spatially-Integrated Heat Content Anomaly","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dwJnBO9r70"}],"identifier":"spatially-integrated-heat-content-anomaly","label":"Spatially-Integrated Heat Content Anomaly","html_id":"spatially-integrated-heat-content-anomaly","implicit":true,"key":"DTToogBuCz"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Now let’s do something harder. We will calculate the horizontally integrated heat content anomaly for the full 3D model domain.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"g7ODImwSJv"}],"key":"Pxvrvdqxap"}],"key":"ELg8IytTTl"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# the monthly climatology\ntheta_clim = ds.THETA.groupby('time.month').mean(dim='time')\n# the anomaly\ntheta_anom = ds.THETA.groupby('time.month') - theta_clim\nrho0 = 1029\ncp = 3994\nohc = rho0 * cp * (theta_anom *\n                   coords.rA *\n                   coords.hFacC).sum(dim=['face', 'j', 'i'])\nohc","key":"GvlTSKs2KX"},{"type":"output","id":"jtIL7f_5_O4_GchnHvB7s","data":[],"key":"D0F6sORU21"}],"key":"s1zDYHb6MO"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# actually load the data\nohc.load()\n# put the depth coordinate back for plotting purposes\nohc.coords['Z'] = coords.Z\nohc.swap_dims({'k': 'Z'}).transpose().plot(vmax=1e20)","key":"ytcegtsSre"},{"type":"output","id":"fK-yUdw0QmWhXZQfl3cK-","data":[],"key":"Zo3aVZ0p12"}],"key":"tL7uJcLwKx"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Spatial Derivatives: Heat Budget","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AlcyqjdE0u"}],"identifier":"spatial-derivatives-heat-budget","label":"Spatial Derivatives: Heat Budget","html_id":"spatial-derivatives-heat-budget","implicit":true,"key":"VZ8voz0zMf"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"As our final exercise, we will do something much more complicated. We will compute the time-mean convergence of vertically-integrated heat fluxes. This is hard for several reasons.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"OmRDiB9W22"}],"key":"r8op9q4nQe"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"The first reason it is hard is because it involves variables located at different grid points.\nFollowing MITgcm conventions, xmitgcm (which produced this dataset) labels the center point with the coordinates ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"iZoFKEEK3W"},{"type":"inlineCode","value":"j, i","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"bBXcoINxRJ"},{"type":"text","value":", the u-velocity point as ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"XIdtb7R5ZC"},{"type":"inlineCode","value":"j, i_g","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"HYmNopVMCk"},{"type":"text","value":", and the v-velocity point as ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"QQz5kgdsTm"},{"type":"inlineCode","value":"j_g, i","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"fXxLcGXV2p"},{"type":"text","value":".\nThe horizontal advective heat flux variables are","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"cdpaOFBXFU"}],"key":"TcyWDQVbEn"},{"type":"code","lang":"","value":"ADVx_TH    (time, k, face, j, i_g) float32 dask.array<shape=(288, 50, 13, 90, 90), chunksize=(1, 50, 13, 90, 90)>\nADVy_TH    (time, k, face, j_g, i) float32 dask.array<shape=(288, 50, 13, 90, 90), chunksize=(1, 50, 13, 90, 90)>","position":{"start":{"line":9,"column":1},"end":{"line":10,"column":1}},"key":"BRysvN3Crp"},{"type":"paragraph","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Xarray won’t allow us to add or multiply variables that have different dimensions, and xarray by itself doesn’t understand how to transform from one grid position to another.","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"wRBWpXbI4J"}],"key":"gwT4mhIWFA"},{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"strong","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"That’s why ","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"KA3MU0fRaE"},{"type":"link","url":"https://xgcm.readthedocs.io/en/latest/","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"xgcm","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"og76awkYL6"}],"urlSource":"https://xgcm.readthedocs.io/en/latest/","key":"cmNK8KWifb"},{"type":"text","value":" was created.","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"MUhpKWeTOK"}],"key":"KJ16vUvOIf"}],"key":"lieIZMEmEC"},{"type":"paragraph","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Xgcm allows us to create a ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"MwK25lCQpR"},{"type":"inlineCode","value":"Grid","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"XBwETvhZNs"},{"type":"text","value":" object, which understands how to interpolate and take differences in a way that is compatible with finite volume models such at MITgcm. Xgcm also works with many other models, including ROMS, POP, MOM5/6, NEMO, etc.","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"XCjBXdX9tU"}],"key":"aLCoq6TXep"},{"type":"paragraph","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"A second reason this is hard is because of the complex topology connecting the different MITgcm faces. Fortunately xgcm also ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"sxGvMefmvn"},{"type":"link","url":"https://xgcm.readthedocs.io/en/latest/grid_topology.html","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"supports this","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"O8sQz4h0Tr"}],"urlSource":"https://xgcm.readthedocs.io/en/latest/grid_topology.html","key":"TJfV3TbHiz"},{"type":"text","value":".","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"SULiul76Rx"}],"key":"CBOjRt1f4d"}],"key":"zWpqNY7Cmx"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# define the connectivity between faces\nface_connections = {'face':\n                    {0: {'X':  ((12, 'Y', False), (3, 'X', False)),\n                         'Y':  (None,             (1, 'Y', False))},\n                     1: {'X':  ((11, 'Y', False), (4, 'X', False)),\n                         'Y':  ((0, 'Y', False),  (2, 'Y', False))},\n                     2: {'X':  ((10, 'Y', False), (5, 'X', False)),\n                         'Y':  ((1, 'Y', False),  (6, 'X', False))},\n                     3: {'X':  ((0, 'X', False),  (9, 'Y', False)),\n                         'Y':  (None,             (4, 'Y', False))},\n                     4: {'X':  ((1, 'X', False),  (8, 'Y', False)),\n                         'Y':  ((3, 'Y', False),  (5, 'Y', False))},\n                     5: {'X':  ((2, 'X', False),  (7, 'Y', False)),\n                         'Y':  ((4, 'Y', False),  (6, 'Y', False))},\n                     6: {'X':  ((2, 'Y', False),  (7, 'X', False)),\n                         'Y':  ((5, 'Y', False),  (10, 'X', False))},\n                     7: {'X':  ((6, 'X', False),  (8, 'X', False)),\n                         'Y':  ((5, 'X', False),  (10, 'Y', False))},\n                     8: {'X':  ((7, 'X', False),  (9, 'X', False)),\n                         'Y':  ((4, 'X', False),  (11, 'Y', False))},\n                     9: {'X':  ((8, 'X', False),  None),\n                         'Y':  ((3, 'X', False),  (12, 'Y', False))},\n                     10: {'X': ((6, 'Y', False),  (11, 'X', False)),\n                          'Y': ((7, 'Y', False),  (2, 'X', False))},\n                     11: {'X': ((10, 'X', False), (12, 'X', False)),\n                          'Y': ((8, 'Y', False),  (1, 'X', False))},\n                     12: {'X': ((11, 'X', False), None),\n                          'Y': ((9, 'Y', False),  (0, 'X', False))}}}\n\n# create the grid object\ngrid = xgcm.Grid(ds, periodic=False, face_connections=face_connections)\ngrid","key":"eEXaxvm2LK"},{"type":"output","id":"4lWXWPCM_YlK-tP0lKlXD","data":[],"key":"q0kVVTy2hl"}],"key":"GwD0Tkhp1H"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now we can use the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MLqeESRT7u"},{"type":"inlineCode","value":"grid","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cQpkzLugAq"},{"type":"text","value":" object we created to take the divergence of a 2D vector","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iZdXv1JJU7"}],"key":"Z2MMTvOj7Q"}],"key":"KnhZsP2oid"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# vertical integral and time mean of horizontal diffusive heat flux\nadvx_th_vint = ds.ADVx_TH.sum(dim='k').mean(dim='time')\nadvy_th_vint = ds.ADVy_TH.sum(dim='k').mean(dim='time')\n\n# difference in the x and y directions\ndiff_ADV_th = grid.diff_2d_vector({'X': advx_th_vint, 'Y': advy_th_vint}, boundary='fill')\n# convergence\nconv_ADV_th = -diff_ADV_th['X'] - diff_ADV_th['Y']\nconv_ADV_th","key":"gpHxYzP0SP"},{"type":"output","id":"MshmS0kpkCUlc7G8zzq2k","data":[],"key":"gCrYfpj3bm"}],"key":"qIVzmamwZn"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# vertical integral and time mean of horizontal diffusive heat flux\ndifx_th_vint = ds.DFxE_TH.sum(dim='k').mean(dim='time')\ndify_th_vint = ds.DFyE_TH.sum(dim='k').mean(dim='time')\n\n# difference in the x and y directions\ndiff_DIF_th = grid.diff_2d_vector({'X': difx_th_vint, 'Y': dify_th_vint}, boundary='fill')\n# convergence\nconv_DIF_th = -diff_DIF_th['X'] - diff_DIF_th['Y']\nconv_DIF_th","key":"wbKjXimu7s"},{"type":"output","id":"Yd63ATU8pJaIuFURv4UCo","data":[],"key":"JkiQ9E8hh3"}],"key":"dqQYdnt6td"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# convert to Watts / m^2 and load\nmean_adv_conv = rho0 * cp * (conv_ADV_th/coords.rA).fillna(0.).load()\nmean_dif_conv = rho0 * cp * (conv_DIF_th/coords.rA).fillna(0.).load()","key":"l1uDiWbU23"},{"type":"output","id":"VUTHQuilvXop06m4_fMeK","data":[],"key":"Ibt0lArtod"}],"key":"QZUsFzM299"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ax = mapper(mean_adv_conv, cmap='RdBu_r', vmax=300, vmin=-300);\nax.set_title(r'Convergence of Advective Flux (W/m$^2$)');","key":"tPVKOPAxp1"},{"type":"output","id":"n4eGirNJ33x7imMXW6VXt","data":[],"key":"uTUNE6OcJI"}],"key":"ol5gRLR0kC"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ax = mapper(mean_dif_conv, cmap='RdBu_r', vmax=300, vmin=-300)\nax.set_title(r'Convergence of Diffusive Flux (W/m$^2$)');","key":"nnXlPlVd3G"},{"type":"output","id":"pQcYKlZD6eAGQgy1ZYM71","data":[],"key":"xnvZWVnFuL"}],"key":"NGKQznY2D6"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ax = mapper(mean_dif_conv + mean_adv_conv, cmap='RdBu_r', vmax=300, vmin=-300)\nax.set_title(r'Convergence of Net Horizontal Flux (W/m$^2$)');","key":"fAsskEHw5x"},{"type":"output","id":"hG-i7jmiL4sykldHaJ_03","data":[],"key":"OxoEJebDOS"}],"key":"YkCD2vzoeR"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ax = mapper(ds.TFLUX.mean(dim='time').load(), cmap='RdBu_r', vmax=300, vmin=-300);\nax.set_title(r'Surface Heat Flux (W/m$^2$)');","key":"gKBKdawY9E"},{"type":"output","id":"BEU6VP8Pjsfehye-WZqHZ","data":[],"key":"IxJo0Ok5MH"}],"key":"G8ZdEMDjOt"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FVoY1Qmxbl"}],"key":"kZApKdg4rJ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LEktsP1hpC"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"r1JXb8edZt"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"In this example we used xarray and cartopy to visualize ocean depth and ocean heat content anomalies. Then, we used xgcm to easily work with variables that have different dimensions.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"uKYZTnV0h3"}],"key":"xtyqoQTRKI"},{"type":"heading","depth":3,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"What’s next?","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"TJ2jgpqhYM"}],"identifier":"whats-next","label":"What’s next?","html_id":"whats-next","implicit":true,"key":"fQ4bs3Ebx5"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"In our last example, we will visualize ocean currents.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"AEshrBcPuo"}],"key":"HXdeZB99Jj"}],"key":"o7EyjFfUt5"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources and references","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KlNNQAM0ch"}],"identifier":"resources-and-references","label":"Resources and references","html_id":"resources-and-references","implicit":true,"key":"R3hIyiDLHe"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"This notebook is based on the ECCOv4 example from the Pangeo physical oceanography gallery: ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"z9rLuyIZ1P"},{"type":"link","url":"http://gallery.pangeo.io/repos/pangeo-gallery/physical-oceanography/04_eccov4.html","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"http://​gallery​.pangeo​.io​/repos​/pangeo​-gallery​/physical​-oceanography​/04​_eccov4​.html","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"hq8ErEgdZn"}],"urlSource":"http://gallery.pangeo.io/repos/pangeo-gallery/physical-oceanography/04_eccov4.html","key":"Igzw0uxicr"}],"key":"XLhGqnVdJu"}],"key":"KevgeqoBxq"}],"key":"Fgvq6R5wP2"}],"key":"zeG7qx6e2h"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"MOM6/CESM Ocean Model Analysis","url":"/notebooks/cesm-mom6","group":"Example Workflows"},"next":{"title":"Gulf Stream Currents","url":"/notebooks/gulf-stream-currents","group":"Example Workflows"}}},"domain":"http://localhost:3000"}